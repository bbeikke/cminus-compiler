-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Compiler for the C-Minus language
--   
--   cmc is a compiler for the C-Minus language. Includes IPPrint.
@package cmc
@version 0.1

module Compiler.Scanner
data Type
Int :: Type
Array :: Type -> Integer -> Type
Pointer :: Type -> Type
Void :: Type
instance Show Type
instance Eq Type


-- | The parser for the C-Minus compiler. This converts the token |stream
--   produced by Compiler.Scanner into an abstract syntax tree.
module Compiler.Parser
data Variable
Variable :: Type -> String -> Variable
data Function
Function :: Type -> String -> [Variable] -> Statement -> Function
data Value

-- | A literal integer value
IntValue :: Integer -> Value

-- | A reference to an integer variable
VariableRef :: String -> Value

-- | A reference to an index of an array
ArrayRef :: String -> Expression -> Value

-- | A function call
FunctionCall :: String -> [Expression] -> Value

-- | A C-Minus operator. Each of these should be fairly self-explanatory
data Operator
Add :: Operator
Subtract :: Operator
Multiply :: Operator
Divide :: Operator
LessOrEqual :: Operator
Less :: Operator
GreaterOrEqual :: Operator
Greater :: Operator
Equal :: Operator
NotEqual :: Operator
data Expression

-- | Assignment of an expression to either a VariableRef or |an ArrayRef
--   (the other constructors for Value are |never generated).
AssignmentExpr :: Value -> Expression -> Expression

-- | An arithmetic expression
ArithmeticExpr :: Operator -> Expression -> Expression -> Expression

-- | A simple expression that evaluates to a value
ValueExpr :: Value -> Expression
data Statement

-- | A statement that's also an expression (probably |an assignment, though
--   not necessarily)
ExpressionStatement :: Expression -> Statement

-- | A code block. These define their own scope, so |they can have local
--   variable declarations, as |well as a list of statements.
CompoundStatement :: [Variable] -> [Statement] -> Statement

-- | An 'if' statement, with a then-clause and an |optional else clause.
--   The else clause, if |non-existent, is represented by a NullStatement.
SelectionStatement :: Expression -> Statement -> Statement -> Statement

-- | A while statement, with a condition and a statement.
IterationStatement :: Expression -> Statement -> Statement

-- | A <a>return</a> statement, with no return |value. This is must be in a
--   Void function.
ReturnStatement :: Statement

-- | A <a>return</a> statement with a return value.
ValueReturnStatement :: Expression -> Statement

-- | An empty statement. These are only generated |when an
--   IterationStatement lacks an else-clause
NullStatement :: Statement
data Toplevel

-- | A global variable
ToplevelVar :: Variable -> Toplevel

-- | A top-level function
ToplevelFunc :: Function -> Toplevel
instance Show Toplevel
instance Eq Toplevel
instance Show Statement
instance Eq Statement
instance Show Expression
instance Eq Expression
instance Show Operator
instance Eq Operator
instance Show Value
instance Eq Value
instance Show Function
instance Eq Function
instance Show Variable
instance Eq Variable
